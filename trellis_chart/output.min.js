function addThousandsSeparator(t) {
    var a = t;
    if (parseFloat(t)) {
        t = new String(t);
        var e = t.split(".");
        e[0] = e[0].split("").reverse().join("").replace(/(\d{3})(?!$)/g, "$1,").split("").reverse().join(""), a = e.join(".")
    }
    return a
}

stacked_bar = {
    make: function(t) {
        void 0 == t && (t = {}), void 0 == t.width && (t.width = 960), void 0 == t.height && (t.height = 500), void 0 == t.container && (t.container = "body"), void 0 == t.color && (t.color = d3.scale.category10()), void 0 == t.values && (t.values = ["A", "B", "C", "D"]), void 0 == t.groupby && (t.groupby = "groupby"), void 0 == t.data && (t.data = {});
        var a = {
                top: t.height / 3.5,
                left: t.width / 8
            },
            e = d3.scale.ordinal().rangeRoundBands([0, t.width - a.left - a.left], .1),
            r = d3.scale.linear().rangeRound([t.height - a.top, 0]),
            n = d3.scale.ordinal().range(t.color.range()),
            o = d3.svg.axis().scale(e).orient("bottom"),
            i = d3.svg.axis().scale(r).orient("left").ticks(5).tickFormat(d3.format(".2s")),
            d = d3.select(t.container).append("svg").attr("width", "100%").attr("data-height", "0.5678").attr("viewBox", "0 0 " + t.width + " " + t.height).append("g").attr("transform", "translate(" + a.left / 2 + "," + a.top / 2 + ")");

			  d.append('text').attr("y",-t.height/50).attr("x", t.width / 2 - t.width / 8).style("text-anchor", "middle").style("font-size", "30px").text(function(cc) {
            return t.header
        })
		
        n.domain(t.values), t.data.forEach(function(a) {
            var e = 0;
            a.groups = n.domain().map(function(r) {
                return {
                    name: r,
                    y0: e,
                    y1: e += +a[r],
                    value: a[r],
                    groupby: a[t.groupby]
                }
            }), a.total = a.groups[a.groups.length - 1].y1
        }), e.domain(t.data.map(function(a) {
            return a[t.groupby]
        })), r.domain([0, d3.max(t.data, function(t) {
            return t.total
        })]), d.append("g").attr("class", "x axis").attr("transform", "translate(0," + (t.height - a.top) + ")").call(o), d.append("g").attr("class", "y axis").call(i).append("text").attr("transform", "rotate(-90)").attr("y", 2).attr("dy", ".71em").style("text-anchor", "end");
        var l = d.selectAll(".stackedbar").data(t.data).enter().append("g").attr("class", "g").attr("transform", function(a) {
            return "translate(" + e(a[t.groupby]) + ",0)"
        });
        l.selectAll("rect").data(function(t) {
            return t.groups
        }).enter().append("rect").attr("width", e.rangeBand()).attr("y", function(t) {
            return r(t.y1)
        }).attr("height", function(t) {
            return r(t.y0) - r(t.y1)
        }).attr("data-title", function(t) {
            return t.groupby + "," + t.name + " " + t.value
        }).style("fill", function(t) {
            return n(t.name)
        });
        var u = d.selectAll(".legend").data(n.domain().slice().reverse()).enter().append("g").attr("class", "legend").attr("transform", function(t, a) {
            return "translate(0," + 20 * a + ")"
        });
        u.append("rect").attr("x", t.width - a.left + 8).attr("width", 18).attr("height", 18).style("fill", n), u.append("text").attr("x", t.width - a.left).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(t) {
            return t
        }), $("rect").tooltip({
            container: "body",
            html: !0,
            placement: "top"
        })
    }
}, normalized_stacked_bar = {
    make: function(t) {
        void 0 == t && (t = {}), void 0 == t.width && (t.width = 960), void 0 == t.height && (t.height = 500), void 0 == t.container && (t.container = "body"), void 0 == t.color && (t.color = d3.scale.category10()), void 0 == t.values && (t.values = ["A", "B", "C", "D"]), void 0 == t.groupby && (t.groupby = "groupby"), void 0 == t.data && (t.data = {});
        var a = {
                top: t.height / 3.5,
                left: t.width / 8
            },
            e = d3.scale.ordinal().rangeRoundBands([0, t.width - a.left - a.left], .1),
            r = d3.scale.linear().rangeRound([t.height - a.top, 0]),
            n = d3.scale.ordinal().range(t.color.range()),
            o = d3.svg.axis().scale(e).orient("bottom"),
            i = d3.svg.axis().scale(r).orient("left").ticks(5).tickFormat(d3.format(".2s")),
            d = d3.select(t.container).append("svg").attr("width", "100%").attr("data-height", "0.5678").attr("viewBox", "0 0 " + t.width + " " + t.height).append("g").attr("transform", "translate(" + a.left / 2 + "," + a.top / 3 + ")");
			
			    d.append('text').attr("y",-t.height/50).attr("x", t.width / 2 - t.width / 8).style("text-anchor", "middle").style("font-size", "30px").text(function(cc) {
            return t.header
        })
		
        n.domain(t.values), t.data.forEach(function(a) {
            var e = 0;
            a.groups = n.domain().map(function(r) {
                return {
                    name: r,
                    y0: e,
                    y1: e += +a[r],
                    value: a[r],
                    groupby: a[t.groupby]
                }
            }), a.groups.forEach(function(t) {
                t.y0 /= e, t.y1 /= e, t.y0 = 100 * t.y0, t.y1 = 100 * t.y1
            }), a.total = a.groups[a.groups.length - 1].y1
        }), t.data.sort(function(t, a) {
            return a.total - t.total
        }), e.domain(t.data.map(function(a) {
            return a[t.groupby]
        })), r.domain([0, d3.max(t.data, function(t) {
            return t.total
        })]), d.append("g").attr("class", "x axis").attr("transform", "translate(0," + (t.height - a.top) + ")").call(o), d.append("g").attr("class", "y axis").call(i).append("text").attr("transform", "rotate(-90)").attr("y", 2).attr("dy", ".71em").style("text-anchor", "end").text("Percentage");
        var l = d.selectAll(".stackedbar").data(t.data).enter().append("g").attr("class", "g").attr("transform", function(a) {
            return "translate(" + e(a[t.groupby]) + ",0)"
        });
        l.selectAll("rect").data(function(t) {
            return t.groups
        }).enter().append("rect").attr("width", e.rangeBand()).attr("y", function(t) {
            return r(t.y1)
        }).attr("height", function(t) {
            return r(t.y0) - r(t.y1)
        }).attr("data-title", function(t) {
            return t.groupby + "," + t.name + " " + t.value
        }).style("fill", function(t) {
            return n(t.name)
        });
        var u = d.selectAll(".legend").data(n.domain().slice().reverse()).enter().append("g").attr("class", "legend").attr("transform", function(t, a) {
            return "translate(0," + 20 * a + ")"
        });
        u.append("rect").attr("x", t.width - a.left + 8).attr("width", 18).attr("height", 18).style("fill", n), u.append("text").attr("x", t.width - a.left).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(t) {
            return t
        }), $("rect").tooltip({
            container: "body",
            html: !0,
            placement: "top"
        })
    }
}, grouped_bar = {
    make: function(t) {
        void 0 == t && (t = {}), void 0 == t.width && (t.width = 960), void 0 == t.height && (t.height = 500), void 0 == t.container && (t.container = "body"), void 0 == t.color && (t.color = d3.scale.category10()), void 0 == t.values && (t.values = ["A", "B", "C", "D"]), void 0 == t.groupby && (t.groupby = "groupby"), void 0 == t.data && (t.data = {});
        var a = {
                top: t.height / 3.5,
                left: t.width / 8
            },
            e = d3.scale.ordinal().rangeRoundBands([0, t.width - a.left - a.left], .1),
            r = d3.scale.ordinal(),
            n = d3.scale.linear().rangeRound([t.height - a.top, 0]),
            o = d3.scale.ordinal().range(t.color.range()),
            i = d3.svg.axis().scale(e).orient("bottom"),
            d = d3.svg.axis().scale(n).orient("left").ticks(5).tickFormat(d3.format(".2s")),
            l = d3.select(t.container).append("svg").attr("width", "100%").attr("data-height", "0.5678").attr("viewBox", "0 0 " + t.width + " " + t.height).append("g").attr("transform", "translate(" + a.left / 2 + "," + a.top / 3 + ")");

           l.append('text').attr("y",-t.height/50).attr("x", t.width / 2 - t.width / 8).style("text-anchor", "middle").style("font-size", "30px").text(function(cc) {
            return t.header
        })
		
        o.domain(t.values), t.data.forEach(function(a) {
            a.groups = o.domain().map(function(e) {
                return {
                    name: e,
                    value: +a[e],
                    groupby: a[t.groupby]
                }
            })
        }), e.domain(t.data.map(function(a) {
            return a[t.groupby]
        })), r.domain(t.values).rangeRoundBands([0, e.rangeBand()]), n.domain([0, d3.max(t.data, function(t) {
            return d3.max(t.groups, function(t) {
                return t.value
            })
        })]), l.append("g").attr("class", "x axis").attr("transform", "translate(0," + (t.height - a.top) + ")").call(i), l.append("g").attr("class", "y axis").call(d);
        var u = l.selectAll(".state").data(t.data).enter().append("g").attr("class", "g").attr("transform", function(a) {
            return "translate(" + e(a[t.groupby]) + ",0)"
        });
        u.selectAll("rect").data(function(t) {
            return t.groups
        }).enter().append("rect").attr("width", r.rangeBand()).attr("x", function(t) {
            return r(t.name)
        }).attr("y", function(t) {
            return n(t.value)
        }).attr("data-title", function(t) {
            return t.groupby + "," + t.name + " " + t.value
        }).attr("height", function(e) {
            return t.height - n(e.value) - a.top
        }).style("fill", function(t) {
            return o(t.name)
        });
        var c = l.selectAll(".legend").data(t.values).enter().append("g").attr("class", "legend").attr("transform", function(t, a) {
            return "translate(0," + 20 * a + ")"
        });
        c.append("rect").attr("x", t.width - a.left + 8).attr("width", 18).attr("height", 18).style("fill", o), c.append("text").attr("x", t.width - a.left).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(t) {
            return t
        }), $("rect").tooltip({
            container: "body",
            html: !0,
            placement: "top"
        })
    }
}, normalized_horizontal_stacked_bar = {
    make: function(t) {
        void 0 == t && (t = {}), void 0 == t.width && (t.width = 960), void 0 == t.height && (t.height = 500), void 0 == t.values && (t.values = ["A", "B", "C", "D"]), void 0 == t.container && (t.container = "body"), void 0 == t.color && (t.color = d3.scale.category10()), void 0 == t.groupby && (t.groupby = "groupby"), void 0 == t.data && (t.data = {});
        var a = {
                top: t.height / 7,
                left: t.width / 8
            },
            e = d3.select(t.container).append("svg").attr("width", "100%").attr("data-height", "0.5678").attr("viewBox", "0 0 " + t.width + " " + t.height).append("g").attr("transform", "translate(" + a.left + "," + a.top / 2 + ")");
             
             e.append('text').attr("y",t.height/14).attr("x", t.width / 2 - t.width / 8).style("text-anchor", "middle").style("font-size", "30px").text(function(cc) {
            return t.header
        })

        t.data.forEach(function(a) {
            total = 0, t.values.forEach(function(t) {
                a[t + "_values"] = +a[t], total += a[t + "_values"]
            }), a.total = total
        }), t.data.forEach(function(a) {
            t.values.forEach(function(t) {
                a[t] = a[t + "_values"] / a.total
            })
        });
        var r = d3.layout.stack()(t.values.map(function(a) {
                return t.data.map(function(e) {
                    return {
                        x: e[t.groupby],
                        y: parseFloat(e[a]),
                        value: parseFloat(e[a + "_values"]),
                        name: a
                    }
                })
            })),
            n = (d3.max(r, function(t) {
                return d3.max(t, function(t) {
                    return t.y
                })
            }), d3.max(r, function(t) {
                return d3.max(t, function(t) {
                    return t.y0 + t.y
                })
            })),
            o = d3.scale.ordinal().domain(r[0].map(function(t) {
                return t.x
            })).rangeRoundBands([25, t.height - a.top], .2),
            i = d3.scale.linear().domain([0, n]).range([0, t.width - a.left - a.left]),
            d = d3.scale.ordinal().range(t.color.range());
        d.domain(t.values);
        var l = d3.svg.axis().scale(i).orient("bottom").tickPadding(12).ticks(5).tickFormat(d3.format(".0%")),
            u = d3.svg.axis().scale(o).tickSize(0).tickPadding(6).orient("left"),
            c = e.selectAll(".layer").data(r).enter().append("g").attr("class", "layer");
        d3.selectAll(".tick > text").style("font-size", "20px");
        c.selectAll("rect").data(function(t) {
            return t
        }).enter().append("rect").attr("y", function(t) {
            return o(t.x)
        }).attr("height", o.rangeBand()).attr("x", function(t) {
            return i(t.y0)
        }).attr("width", function(t) {
            return i(t.y)
        }).style("fill", function(t) {
            return d(t.name)
        }).style("stroke", function(t) {
            return d3.rgb(d(t.name)).darker()
        }).attr("data-title", function(t) {
            return t.x + "," + t.name + " " + addThousandsSeparator(t.value)
        });
        e.append("g").attr("class", "x axis").attr("transform", "translate(0," + (t.height - a.top) + ")").call(l).selectAll("text").style("text-anchor", "middle").attr("dx", "-.18em").attr("dy", ".15em"), e.append("g").attr("class", "y axis").attr("transform", "translate(0,0)").call(u);
        var s = e.selectAll(".legend").data(t.values).enter().append("g").attr("class", "legend").attr("transform", function(t, a) {
            return "translate(0," + 20 * a + ")"
        });
        s.append("rect").attr("x", t.width - 3 * a.left / 2 + 38).attr("width", 18).attr("height", 18).style("fill", d), s.append("text").attr("x", t.width - 3 * a.left / 2+22).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").style("font-size", "20px").text(function(t) {
            return t
        }), $("rect").tooltip({
            container: "body",
            html: !0,
            placement: "top"
        })
    }
}, horizontal_stacked_bar = {
    make: function(t) {
        void 0 == t && (t = {}), void 0 == t.width && (t.width = 960), void 0 == t.height && (t.height = 500), void 0 == t.values && (t.values = ["A", "B", "C", "D"]), void 0 == t.container && (t.container = "body"), void 0 == t.color && (t.color = d3.scale.category10()), void 0 == t.groupby && (t.groupby = "groupby"), void 0 == t.data && (t.data = {});
        var a = {
                top: t.height / 7,
                left: t.width / 8
            },
            e = d3.select(t.container).append("svg").attr("width", "100%").attr("data-height", "0.5678").attr("viewBox", "0 0 " + t.width + " " + t.height).append("g").attr("transform", "translate(" + a.left + "," + a.top / 2 + ")");
		
		            
             e.append('text').attr("y",t.height/14).attr("x", t.width / 2 - t.width / 8).style("text-anchor", "middle").style("font-size", "30px").text(function(cc) {
            return t.header
        })

            var r = d3.layout.stack()(t.values.map(function(a) {
                return t.data.map(function(e) {
                    return {
                        x: e[t.groupby],
                        y: parseFloat(e[a]),
                        value: parseFloat(e[a]),
                        name: a
                    }
                })
            })),
            n = (d3.max(r, function(t) {
                return d3.max(t, function(t) {
                    return t.y
                })
            }), d3.max(r, function(t) {
                return d3.max(t, function(t) {
                    return t.y0 + t.y
                })
            })),
            o = d3.scale.ordinal().domain(r[0].map(function(t) {
                return t.x
            })).rangeRoundBands([25, t.height - a.top], .2),
            i = d3.scale.linear().domain([0, n]).range([0, t.width - a.left - a.left]),
            d = d3.scale.ordinal().range(t.color.range());
        d.domain(t.values);
        var l = d3.svg.axis().scale(i).orient("bottom").tickPadding(12),
            u = d3.svg.axis().scale(o).tickSize(0).tickPadding(6).ticks(5).orient("left"),
            c = e.selectAll(".layer").data(r).enter().append("g").attr("class", "layer");
        d3.selectAll(".tick > text").style("font-size", "20px");
        c.selectAll("rect").data(function(t) {
            return t
        }).enter().append("rect").attr("y", function(t) {
            return o(t.x)
        }).attr("height", o.rangeBand()).attr("x", function(t) {
            return i(t.y0)
        }).attr("width", function(t) {
            return i(t.y)
        }).style("fill", function(t) {
            return d(t.name)
        }).style("stroke", function(t) {
            return d3.rgb(d(t.name)).darker()
        }).attr("data-title", function(t) {
            return t.x + "," + t.name + " " + t.value
        });
        e.append("g").attr("class", "x axis").attr("transform", "translate(0," + (t.height - a.top) + ")").call(l).selectAll("text").style("text-anchor", "middle").attr("dx", "-.18em").attr("dy", ".15em"), e.append("g").attr("class", "y axis").attr("transform", "translate(0,0)").call(u);
        var s = e.selectAll(".legend").data(t.values).enter().append("g").attr("class", "legend").attr("transform", function(t, a) {
            return "translate(0," + 20 * a + ")"
        });
        s.append("rect").attr("x", t.width - 3 * a.left / 2 + 38).attr("width", 18).attr("height", 18).style("fill", d), s.append("text").attr("x", t.width - 3 * a.left / 2 + 22).attr("y", 9).attr("dy", ".35em").style("text-anchor", "end").text(function(t) {
            return t
        }), $("rect").tooltip({
            container: "body",
            html: !0,
            placement: "top"
        })
    }
};